// Generated by CoffeeScript 1.7.1

/*
 * Omelette Simple Auto Completion for Node
 */

(function() {
  var EventEmitter, Omelette, fs, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require("events").EventEmitter;

  path = require("path");

  fs = require("fs");

  Omelette = (function(_super) {
    var log;

    __extends(Omelette, _super);

    log = console.log;

    function Omelette() {
      var isZsh, _ref;
      this.compgen = process.argv.indexOf("--compgen");
      this.install = process.argv.indexOf("--completion") > -1;
      isZsh = process.argv.indexOf("--compzsh") > -1;
      this.fragment = parseInt(process.argv[this.compgen + 1]) - (isZsh ? 1 : 0);
      this.word = process.argv[this.compgen + 2];
      this.line = process.argv[this.compgen + 3];
      _ref = process.env, this.HOME = _ref.HOME, this.SHELL = _ref.SHELL;
    }

    Omelette.prototype.setProgram = function(program) {
      this.program = program;
    };

    Omelette.prototype.setFragments = function() {
      var fragments;
      fragments = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.fragments = fragments;
    };

    Omelette.prototype.generate = function() {
      this.emit("complete", this.fragments[this.fragment - 1], this.word, this.line);
      this.emit(this.fragments[this.fragment - 1], this.word, this.line);
      this.emit("$" + this.fragment, this.word, this.line);
      return process.exit();
    };

    Omelette.prototype.reply = function(words) {
      if (words == null) {
        words = [];
      }
      console.log(words.join("\n"));
      return process.exit();
    };

    Omelette.prototype.generateCompletionCode = function() {
      var completion;
      completion = "_" + this.program + "_complette";
      return "### " + this.program + " completion - begin. generated by omelette.js ###\nif type compdef &>/dev/null; then\n  " + completion + "() {\n    compadd -- `" + this.program + " --compzsh --compgen \"${CURRENT}\" \"${words[CURRENT-1]}\" \"${BUFFER}\"`\n  }\n  compdef " + completion + " " + this.program + "\nelif type complete &>/dev/null; then\n  " + completion + "() {\n    COMPREPLY=( $(compgen -W '$(" + this.program + " --compbash --compgen \"${COMP_CWORD}\" \"${COMP_WORDS[COMP_CWORD-1]}\" \"${COMP_LINE}\")' -- \"${COMP_WORDS[COMP_CWORD]}\") )\n  }\n  complete -F " + completion + " " + this.program + "\nfi\n### " + this.program + " completion - end ###";
    };

    Omelette.prototype.checkInstall = function() {
      if (this.install) {
        log(generateCompletionCode());
        return process.exit();
      }
    };

    Omelette.prototype.getActiveShell = function() {
      var SHELL;
      SHELL = process.env.SHELL;
      if (SHELL.match(/bash/)) {
        return 'bash';
      } else if (SHELL.match(/zsh/)) {
        return 'zsh';
      }
    };

    Omelette.prototype.getDefaultShellInitFile = function() {
      var fileAt, fileAtHome;
      fileAt = function(root) {
        return function(file) {
          return path.join(root, file);
        };
      };
      fileAtHome = fileAt(this.HOME);
      switch (this.shell = this.getActiveShell()) {
        case 'bash':
          return fileAtHome('.bash_profile');
        case 'zsh':
          return fileAtHome('.zshrc');
      }
    };

    Omelette.prototype.setupShellInitFile = function(initFile) {
      var completionPath, programFolder;
      if (initFile == null) {
        initFile = this.getDefaultShellInitFile();
      }
      switch (this.shell) {
        case 'bash':
          programFolder = path.join(this.HOME, "." + this.program);
          completionPath = path.join(programFolder, 'completion.sh');
          if (!fs.existsSync(programFolder)) {
            fs.mkdirSync(programFolder);
          }
          fs.writeFileSync(completionPath, this.generateCompletionCode());
          fs.appendFileSync(initFile, "\n\nsource ~/" + completionPath + "\n");
          break;
        case 'zsh':
          fs.appendFileSync(initFile, "\n\n. <(" + this.program + " --completion)\n");
      }
      return process.exit();
    };

    Omelette.prototype.init = function() {
      if (this.compgen > -1) {
        return this.generate();
      }
    };

    return Omelette;

  })(EventEmitter);

  module.exports = function(template) {
    var fragments, program, _omelette, _ref;
    _ref = template.split(/\s+/), program = _ref[0], fragments = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    fragments = fragments.map(function(fragment) {
      return fragment.replace(/^\<+|\>+$/g, '');
    });
    _omelette = new Omelette;
    _omelette.setProgram(program);
    _omelette.setFragments.apply(_omelette, fragments);
    _omelette.checkInstall();
    return _omelette;
  };

}).call(this);
